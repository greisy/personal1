Forms and Inputs helpers
create and update form
---------------------------------
|<%= form_for(@zombie) do |f|%> |
|								|	
|<% end %>						|			
---------------------------------
if @zombie isn't saved to the DB yet it's gonna generate the next code
<form action="/zombies" method= "post" />
If @zombie is saved to the DB it's gonna to create a code like this:
<form action="/zombies" method= "POST">
	<input name="_method" type="hidden" value="put" />

SUBMIT BUTTON
---------------------------------
|<%= form_for(@zombie) do |f|%> |
|	...							|	
|	<%= f.submit %>				|
|<% end %>						|			
---------------------------------
if @zombie isn't saved to the DB yet it's gonna generate the next code
	<input name="commit" type="submit" value="Create Zombie">
If @zombie is saved to the DB it's gonna to create a code like this:
	<input name="commit" type="submit" value="Update Zombie">

TEXT_FIELD HELPER
---------------------------------
|<%= form_for(@zombie) do |f|%> |
|	...							|
|	<%= f.text_field :name	%>	|	
|	<%= f.submit %>				|
|<% end %>						|			
---------------------------------
When submited, request parameters:
:params=>{:zombie =>{:name =>"Eric"}}
if @zombie isn't saved to the DB yet it's gonna generate the next code
	<%= input type="text" name="zombie[name]" size="30" %>
If @zombie is saved to the DB it's gonna to create a code like this:
	<%= input type="text" name="zombie[name]" size="30" value="Eric" %>
If @zombie.name has a validation error, it's gonna grab the field between a div with a class, so we can change the properties of the class
<div class="field_with_errors">
	<input type="text" name="zombie[name]" size="30" value="" /> 
</div>

LABEL HELPER
---------------------------------
|<%= form_for(@zombie) do |f|%> |
|	...							|
|	<%= f.label :name %><br/>	|
|	<%= f.text_field :name	%>	|	
|	<%= f.submit %>				|
|<% end %>						|			
---------------------------------
will render out
<label for="zombie_name">Name</label>
If @zombie.name has a validation error
<div class="field_with_errors">
	<label for="zombie_name">Name</label>
</div>

INPUT HELPERS
<%= f.text_area :bio %>

<%= f.check_box :rotting %> #check box used for booleans
List of radio buttons (without their labels)
<%= f.radio_button :decomp, 'rotting' %>
<%= f.radio_button :decomp, 'stale' %>

Select box with three options
<%= f.select :decomp, ['fresh', 'rotting', 'stale']%>

Select box with three options, each with a numerical value
<%= f.select :decomp, [['fresh',1], ['rotting',2], ['stale',3]]%>

ALTERNATIVE TEXT INPUT HELPERS
<%= f.password_field :password %>
<%=	f.number_field :price %>
<%=	f.range_field :quality %>
<%=	f.email_field :email %>
<%=	f.uri_field :website %>
<%=	f.telephone_field :mobile %>


--------------------------
UPDATING THE CONTROLLER FOR NESTING
/zombies/4/tweets/2 -----> params ={:zombie_id =>4, id=>2}
/zombies/4/tweets -----> params = {:zombie_id => 4}
class TweetsController 
	before_filter :get_zombie

	def get_zombie
		@zombie = Zombie.find(params[:zombie_id])
	end

	def show
		@tweet = @zombie.tweets.find(params[:id])
	end

	def index
		@tweets = @zombie.tweets
	end
end
Nested rake routes
zombie_tweets 	GET 	/zombies/:zombie_id/tweets
				POST 	/zombies/:zombie_id/tweets
new_zombie_tweet GET 	/zombies/:zombie_id/tweets/new
edit_zombie_tweet GET 	/zombies/:zombie_id/tweets/edit
zombie_tweet    GET 	/zombies/:zombie_id/tweets/:id
				PUT 	/zombies/:zombie_id/tweets/:id
				DELETE	/zombies/:zombie_id/tweets/:id

<%= link_to "#{@zombie.name}'s Tweets, zombie_tweets_path(@zombie) %>
<%= link_to "New tweet", new_zombie_tweet_path(@zombie)%>
<%= link_to "Edit tweet", edit_zombie_tweet_path(@zombie) %>
<%= link_to "Show tweet", zombie_tweet_path(@zombie, @tweet) %>
<%= link_to "Show", [@zombie,@tweet] %>
<%= link_to "Destroy", [@zombie,@tweet], method: :delete %>

app/views/tweets/index.html.erb
<% @tweets.each do |tweet| %>
<tr>
	<td><%= tweet.body %></td>
	<td><%= link_to "Show", [@zombie,@tweet] %></td>
	<td><%= link_to "Edit tweet", edit_zombie_tweet_path(@zombie) %></td>
	<td><%= link_to "Destroy", [@zombie,@tweet], method: :delete %></td>
</tr>
<%= link_to "New tweet", new_zombie_tweet_path(@zombie)%>

app/views/tweets/_form.html.erb
<%= form_for([@zombie,@tweet]) do |f| %>

app/controller/tweets_controller.rb
def create
	@tweet = @zombie.tweets.new(params[:tweet])
	respond_to do |format|
		if @tweet.save
			format.html {redirec_to [@zombie, @tweet],
			notice: 'Tweet was successfully created'}
			format.json {render json: [@zombie,@tweet], 
						status: :created, 
						location: [@zombie, @tweet]}
		else
			format.html { render action: "new"}
			format.json { render json: @tweet.errors,
							status: :unprocessable_entity }	
		end
	end
end


----------------EJERCICIOS
Create the form for entering tweet status (text_area) and location (text_field) using the appropriate Rails view helpers. All you need is a form_for block, the input helpers, and a submit button. 
<%= form_for(@tweet) do |f| %>
  <%= f.text_area :status %>
  <%= f.text_field :location %>
  <%= f.submit %>
<% end %>

Look at the following database table and create the proper input fields for the columns listed here. 
<%= form_for(@weapon) do |f| %>
    <%= f.text_field :name%>
    <%= f.number_field :ammo %>
    <%= f.check_box :is_broken %>
<% end %>

Rather than having a weapon that is broken or not, lets instead have a condition field which is either "New", "Rusty", or "Broken". Add a set of radio buttons where the user can select one of these states. Make "New" be checked by default. 
<%= form_for(@weapon) do |f| %>
  <%= f.radio_button :condition, 'New', checked: true%>
  <%= f.radio_button :condition, 'Rusty' %>
  <%= f.radio_button :condition, 'Broken' %>
<% end %>

Instead of using radio buttons, use a select box for the condition. Refactor the code below: 
<%= form_for(@weapon) do |f| %>
  <%= f.select :condition, ['New','Rusty', 'Broken']%>

<% end %>
