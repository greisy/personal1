JQuery Plugins encapsulated behavior that we can reutilize around the web site
index.html
<li class='vacation' data-price='399'>
	<h3>Hawaiian vacation</h3>
	<button>Show price</button>
	<a href="#" class='not-interested'> Not Interested</a>
</li>
When clicked button, we'll add a <p> with the price
When clicked not interested will hide the vacation

Setting up a plugin
$.fn.priceify = function(){ //priceify is the name of our plugin and using the $.fn makes this method availible to all jquery objects
	console.log('Pricify called');
	console.log(this);
}

to invoke this method we need to grab the jquery object $('.vacation')
$('.vacation').priceify();
When we call this method the jquery object is an array of li so we need to be careful!

$.fn.priceify = function(){ 
	var vacation = this; //this will be $('.vacation')
	vacation.on('click.priceify', 'button', function(){
		var price = vacation.data('price');
		var details = $('<p>Book 3 days for $'+(3*price)+'</p>');
		$(this).hide();// this will be the button that just was clicked
		vacation.append(details);
	});
}

$(document).ready(function(){
	$('.vacation').priceify();
});
// If we clicks the button it'll show us the same price to each box, we need to click one button and changes the price of that specify box, the problem in the example above is when we created the variable vacation equal to this, we are assigned an array of li, we need to use the jquery object method
each(<function>)
$.fn.priceify = function(){ 
	this.each(function(){
		var vacation = this; 
		vacation.on('click.priceify', 'button', function(){
			var price = vacation.data('price');
			var details = $('<p>Book 3 days for $'+(3*price)+'</p>');
			$(this).hide();// this will be the button that just was clicked
			vacation.append(details);
		});
	});
};
$(document).ready(function(){
	$('.vacation').priceify();
});

We need to plugin accept different arguments so we only put an json object as a argument and put as argument options
$('.vacation').priceify({days: 5});

$.fn.priceify = function(options){
	...
	var price = vacation.data('price');
	var details = $('<p>Book '+ options.days+ 'days for $'+(options.days* price)+'</p>');
}

BUt what if we wanted to make it an optional parameter?
Default it to 3 days if not passed in
$('.vacation').priceify({days: 5}); OR $('.vacation').priceify();
We need to use the method $.extend which take two or more javascript objects and combine all objects
$.extend({days: 3}, {price: 5}) -----> {days: 3, price: 5}
$.extend({days: 3}, {}) ----> {days: 3}
$.extend({days: 3}, { days: 5})-------> {days: 5}

$.fn.priceify = function(options){
	this.each(function(){
		var settings = $.extend(
		{days: 3,
		vacation: this,
		price: $(this).data('price');
		}, options);
		settings.vacation.on('click.priceify', 'button', function(){
			var details = $('<p>Book'+settings.days+'days for $'+(settings.days * settings.price)+'</p>');
			$(this).hide();
			settings.vacation.append(details);
		});
	});
};

Now we want to show the price of each box when a single button is clicked, for that we can do it through the trigger method	but it's a cleaner way to do it


$.fn.priceify = function(options){
	this.each(function(){
		var settings = $.extend(
		{days: 3,
		vacation: this,
		price: $(this).data('price');
		}, options);

		var show = function(){
			var details = $('<p>Book'+settings.days+'days for $'+(settings.days * settings.price)+'</p>');
			$(this).hide();
			settings.vacation.append(details);
		};
		settings.vacation.on('click.priceify', 'button', show);
		settings.vacation.on('show.priceify', show);
	});
};
	$('.show-prices).on('click', function(event){
		event.preventDefault();
		$('.vacation').trigger('show.priceify');
	});

Now we want to hide a box when the person makes click to the link not interested so we are going to add a new function inside the plugin 

$.fn.priceify = function(options){
	this.each(function(){
		var settings = $.extend(
		{days: 3,
		vacation: this,
		price: $(this).data('price');
		}, options);

		var show = function(){
			var details = $('<p>Book'+settings.days+'days for $'+(settings.days * settings.price)+'</p>');
			$(this).hide();
			settings.vacation.append(details);
		};

		var remove = function(){
			settings.vacation.hide().off('.priceify');
		};

		settings.vacation.on('click.priceify','.no-interested', remove);
		settings.vacation.on('click.priceify', 'button', show);
		settings.vacation.on('show.priceify', show);
	});
};

EJERCICIOS
Let's revisit our Vacation Photos page from Try jQuery. Previously we wrote some code to show the photos when each link was clicked. We'll see what we can do to refactor this functionality into a jQuery Plugin.

To start off, create a new jQuery plugin named photofy. Call it within your event handler for all .tour elements. Make your plugin call console.log passing in this -- the elements that we are attempting to photofy.

$.fn.photofy = function(){
	console.log(this);
};

$(document).ready(function() {
	$('.tour').photofy();
});

Looks like the page loads without any errors, but it doesn't yet do anything. Within your plugin, loop through each object passed in and run console.log(this) within the loop.

$.fn.photofy = function() {
  this.each(function(){
  	console.log(this);// este this es diferente al this que llama al metodo .each
  });
}

$(document).ready(function() {
  $('.tour').photofy();
});

For each tour that we are using our "photofy" plugin on, we'll want to do a few things.

For starters create an event handler using on, that targets the .see-photos link within each .tour. When this is clicked, run a function that will add a class of is-showing-photofy to the tour. You'll probably want to save a reference to this outside of your event handler, and use that in the click event handler.

$.fn.photofy = function() {
  this.each(function() {
  	var tour = $(this);
    var show = function(event){
      event.preventDefault();
    	tour.addClass('is-showing-photofy'); //be careful we don't need to put a . ahead of the class
    }
    tour.on('click.photofy', '.see-photos', show);
  });
};

$(document).ready(function() {
  $('.tour').photofy();
});

We'll need to update our plugin to accept and use an options JavaScript Object that we're passing in. Looks like someone started refactoring the show method already to use a variable called settings, which uses a count and a tour key in settings.

Create a variable, settings, that defaults the count to 3, and sets tour to the current tour element -- $(this). Then, update the call to photofy on load to pass in a JavaScript object with a count of 1.

$.fn.photofy = function(options) {
  this.each(function() {
    var settings = $.extend(
         {
           count: 3,
           tour: $(this)
         },
        options);
    
    
    var show = function(e) {
       e.preventDefault();
       settings.tour
               .addClass('is-showing-photofy')
               .find('.photos')
               .find('li:gt('+(settings.count-1)+')').hide();
    };
       
     
     settings.tour.on('click.photofy', '.see-photos', show);
   
  });
};

$(document).ready(function() {
  $('.tour').photofy({ count: 1});
});
